// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/Faroukhamadi/Banketeer/customer_service/customerdb/ent/account"
	"github.com/Faroukhamadi/Banketeer/customer_service/customerdb/ent/customer"
	"github.com/Faroukhamadi/Banketeer/customer_service/customerdb/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	accountMixin := schema.Account{}.Mixin()
	accountMixinFields0 := accountMixin[0].Fields()
	_ = accountMixinFields0
	accountFields := schema.Account{}.Fields()
	_ = accountFields
	// accountDescCreateTime is the schema descriptor for create_time field.
	accountDescCreateTime := accountMixinFields0[0].Descriptor()
	// account.DefaultCreateTime holds the default value on creation for the create_time field.
	account.DefaultCreateTime = accountDescCreateTime.Default.(func() time.Time)
	// accountDescUpdateTime is the schema descriptor for update_time field.
	accountDescUpdateTime := accountMixinFields0[1].Descriptor()
	// account.DefaultUpdateTime holds the default value on creation for the update_time field.
	account.DefaultUpdateTime = accountDescUpdateTime.Default.(func() time.Time)
	// account.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	account.UpdateDefaultUpdateTime = accountDescUpdateTime.UpdateDefault.(func() time.Time)
	// accountDescBalance is the schema descriptor for balance field.
	accountDescBalance := accountFields[0].Descriptor()
	// account.DefaultBalance holds the default value on creation for the balance field.
	account.DefaultBalance = accountDescBalance.Default.(float32)
	// accountDescAccountNumber is the schema descriptor for accountNumber field.
	accountDescAccountNumber := accountFields[1].Descriptor()
	// account.AccountNumberValidator is a validator for the "accountNumber" field. It is called by the builders before save.
	account.AccountNumberValidator = func() func(string) error {
		validators := accountDescAccountNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(accountNumber string) error {
			for _, fn := range fns {
				if err := fn(accountNumber); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	customerMixin := schema.Customer{}.Mixin()
	customerMixinFields0 := customerMixin[0].Fields()
	_ = customerMixinFields0
	customerFields := schema.Customer{}.Fields()
	_ = customerFields
	// customerDescCreateTime is the schema descriptor for create_time field.
	customerDescCreateTime := customerMixinFields0[0].Descriptor()
	// customer.DefaultCreateTime holds the default value on creation for the create_time field.
	customer.DefaultCreateTime = customerDescCreateTime.Default.(func() time.Time)
	// customerDescUpdateTime is the schema descriptor for update_time field.
	customerDescUpdateTime := customerMixinFields0[1].Descriptor()
	// customer.DefaultUpdateTime holds the default value on creation for the update_time field.
	customer.DefaultUpdateTime = customerDescUpdateTime.Default.(func() time.Time)
	// customer.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	customer.UpdateDefaultUpdateTime = customerDescUpdateTime.UpdateDefault.(func() time.Time)
}
