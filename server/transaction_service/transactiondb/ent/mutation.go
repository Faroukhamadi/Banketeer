// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/Faroukhamadi/Banketeer/transaction_service/transactiondb/ent/predicate"
	"github.com/Faroukhamadi/Banketeer/transaction_service/transactiondb/ent/transaction"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTransaction = "Transaction"
)

// TransactionMutation represents an operation that mutates the Transaction nodes in the graph.
type TransactionMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	create_time          *time.Time
	update_time          *time.Time
	accountId            *int
	addaccountId         *int
	senderAccountId      *int
	addsenderAccountId   *int
	receiverAccountId    *int
	addreceiverAccountId *int
	tellerId             *int
	addtellerId          *int
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*Transaction, error)
	predicates           []predicate.Transaction
}

var _ ent.Mutation = (*TransactionMutation)(nil)

// transactionOption allows management of the mutation configuration using functional options.
type transactionOption func(*TransactionMutation)

// newTransactionMutation creates new mutation for the Transaction entity.
func newTransactionMutation(c config, op Op, opts ...transactionOption) *TransactionMutation {
	m := &TransactionMutation{
		config:        c,
		op:            op,
		typ:           TypeTransaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTransactionID sets the ID field of the mutation.
func withTransactionID(id int) transactionOption {
	return func(m *TransactionMutation) {
		var (
			err   error
			once  sync.Once
			value *Transaction
		)
		m.oldValue = func(ctx context.Context) (*Transaction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Transaction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTransaction sets the old Transaction of the mutation.
func withTransaction(node *Transaction) transactionOption {
	return func(m *TransactionMutation) {
		m.oldValue = func(context.Context) (*Transaction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TransactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TransactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TransactionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TransactionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Transaction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *TransactionMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TransactionMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TransactionMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *TransactionMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *TransactionMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *TransactionMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetAccountId sets the "accountId" field.
func (m *TransactionMutation) SetAccountId(i int) {
	m.accountId = &i
	m.addaccountId = nil
}

// AccountId returns the value of the "accountId" field in the mutation.
func (m *TransactionMutation) AccountId() (r int, exists bool) {
	v := m.accountId
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountId returns the old "accountId" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldAccountId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountId: %w", err)
	}
	return oldValue.AccountId, nil
}

// AddAccountId adds i to the "accountId" field.
func (m *TransactionMutation) AddAccountId(i int) {
	if m.addaccountId != nil {
		*m.addaccountId += i
	} else {
		m.addaccountId = &i
	}
}

// AddedAccountId returns the value that was added to the "accountId" field in this mutation.
func (m *TransactionMutation) AddedAccountId() (r int, exists bool) {
	v := m.addaccountId
	if v == nil {
		return
	}
	return *v, true
}

// ResetAccountId resets all changes to the "accountId" field.
func (m *TransactionMutation) ResetAccountId() {
	m.accountId = nil
	m.addaccountId = nil
}

// SetSenderAccountId sets the "senderAccountId" field.
func (m *TransactionMutation) SetSenderAccountId(i int) {
	m.senderAccountId = &i
	m.addsenderAccountId = nil
}

// SenderAccountId returns the value of the "senderAccountId" field in the mutation.
func (m *TransactionMutation) SenderAccountId() (r int, exists bool) {
	v := m.senderAccountId
	if v == nil {
		return
	}
	return *v, true
}

// OldSenderAccountId returns the old "senderAccountId" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldSenderAccountId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSenderAccountId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSenderAccountId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSenderAccountId: %w", err)
	}
	return oldValue.SenderAccountId, nil
}

// AddSenderAccountId adds i to the "senderAccountId" field.
func (m *TransactionMutation) AddSenderAccountId(i int) {
	if m.addsenderAccountId != nil {
		*m.addsenderAccountId += i
	} else {
		m.addsenderAccountId = &i
	}
}

// AddedSenderAccountId returns the value that was added to the "senderAccountId" field in this mutation.
func (m *TransactionMutation) AddedSenderAccountId() (r int, exists bool) {
	v := m.addsenderAccountId
	if v == nil {
		return
	}
	return *v, true
}

// ResetSenderAccountId resets all changes to the "senderAccountId" field.
func (m *TransactionMutation) ResetSenderAccountId() {
	m.senderAccountId = nil
	m.addsenderAccountId = nil
}

// SetReceiverAccountId sets the "receiverAccountId" field.
func (m *TransactionMutation) SetReceiverAccountId(i int) {
	m.receiverAccountId = &i
	m.addreceiverAccountId = nil
}

// ReceiverAccountId returns the value of the "receiverAccountId" field in the mutation.
func (m *TransactionMutation) ReceiverAccountId() (r int, exists bool) {
	v := m.receiverAccountId
	if v == nil {
		return
	}
	return *v, true
}

// OldReceiverAccountId returns the old "receiverAccountId" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldReceiverAccountId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReceiverAccountId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReceiverAccountId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReceiverAccountId: %w", err)
	}
	return oldValue.ReceiverAccountId, nil
}

// AddReceiverAccountId adds i to the "receiverAccountId" field.
func (m *TransactionMutation) AddReceiverAccountId(i int) {
	if m.addreceiverAccountId != nil {
		*m.addreceiverAccountId += i
	} else {
		m.addreceiverAccountId = &i
	}
}

// AddedReceiverAccountId returns the value that was added to the "receiverAccountId" field in this mutation.
func (m *TransactionMutation) AddedReceiverAccountId() (r int, exists bool) {
	v := m.addreceiverAccountId
	if v == nil {
		return
	}
	return *v, true
}

// ResetReceiverAccountId resets all changes to the "receiverAccountId" field.
func (m *TransactionMutation) ResetReceiverAccountId() {
	m.receiverAccountId = nil
	m.addreceiverAccountId = nil
}

// SetTellerId sets the "tellerId" field.
func (m *TransactionMutation) SetTellerId(i int) {
	m.tellerId = &i
	m.addtellerId = nil
}

// TellerId returns the value of the "tellerId" field in the mutation.
func (m *TransactionMutation) TellerId() (r int, exists bool) {
	v := m.tellerId
	if v == nil {
		return
	}
	return *v, true
}

// OldTellerId returns the old "tellerId" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldTellerId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTellerId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTellerId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTellerId: %w", err)
	}
	return oldValue.TellerId, nil
}

// AddTellerId adds i to the "tellerId" field.
func (m *TransactionMutation) AddTellerId(i int) {
	if m.addtellerId != nil {
		*m.addtellerId += i
	} else {
		m.addtellerId = &i
	}
}

// AddedTellerId returns the value that was added to the "tellerId" field in this mutation.
func (m *TransactionMutation) AddedTellerId() (r int, exists bool) {
	v := m.addtellerId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTellerId resets all changes to the "tellerId" field.
func (m *TransactionMutation) ResetTellerId() {
	m.tellerId = nil
	m.addtellerId = nil
}

// Where appends a list predicates to the TransactionMutation builder.
func (m *TransactionMutation) Where(ps ...predicate.Transaction) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TransactionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Transaction).
func (m *TransactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TransactionMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, transaction.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, transaction.FieldUpdateTime)
	}
	if m.accountId != nil {
		fields = append(fields, transaction.FieldAccountId)
	}
	if m.senderAccountId != nil {
		fields = append(fields, transaction.FieldSenderAccountId)
	}
	if m.receiverAccountId != nil {
		fields = append(fields, transaction.FieldReceiverAccountId)
	}
	if m.tellerId != nil {
		fields = append(fields, transaction.FieldTellerId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TransactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldCreateTime:
		return m.CreateTime()
	case transaction.FieldUpdateTime:
		return m.UpdateTime()
	case transaction.FieldAccountId:
		return m.AccountId()
	case transaction.FieldSenderAccountId:
		return m.SenderAccountId()
	case transaction.FieldReceiverAccountId:
		return m.ReceiverAccountId()
	case transaction.FieldTellerId:
		return m.TellerId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TransactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case transaction.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case transaction.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case transaction.FieldAccountId:
		return m.OldAccountId(ctx)
	case transaction.FieldSenderAccountId:
		return m.OldSenderAccountId(ctx)
	case transaction.FieldReceiverAccountId:
		return m.OldReceiverAccountId(ctx)
	case transaction.FieldTellerId:
		return m.OldTellerId(ctx)
	}
	return nil, fmt.Errorf("unknown Transaction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case transaction.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case transaction.FieldAccountId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountId(v)
		return nil
	case transaction.FieldSenderAccountId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSenderAccountId(v)
		return nil
	case transaction.FieldReceiverAccountId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReceiverAccountId(v)
		return nil
	case transaction.FieldTellerId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTellerId(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TransactionMutation) AddedFields() []string {
	var fields []string
	if m.addaccountId != nil {
		fields = append(fields, transaction.FieldAccountId)
	}
	if m.addsenderAccountId != nil {
		fields = append(fields, transaction.FieldSenderAccountId)
	}
	if m.addreceiverAccountId != nil {
		fields = append(fields, transaction.FieldReceiverAccountId)
	}
	if m.addtellerId != nil {
		fields = append(fields, transaction.FieldTellerId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TransactionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldAccountId:
		return m.AddedAccountId()
	case transaction.FieldSenderAccountId:
		return m.AddedSenderAccountId()
	case transaction.FieldReceiverAccountId:
		return m.AddedReceiverAccountId()
	case transaction.FieldTellerId:
		return m.AddedTellerId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldAccountId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAccountId(v)
		return nil
	case transaction.FieldSenderAccountId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSenderAccountId(v)
		return nil
	case transaction.FieldReceiverAccountId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReceiverAccountId(v)
		return nil
	case transaction.FieldTellerId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTellerId(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TransactionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TransactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TransactionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Transaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TransactionMutation) ResetField(name string) error {
	switch name {
	case transaction.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case transaction.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case transaction.FieldAccountId:
		m.ResetAccountId()
		return nil
	case transaction.FieldSenderAccountId:
		m.ResetSenderAccountId()
		return nil
	case transaction.FieldReceiverAccountId:
		m.ResetReceiverAccountId()
		return nil
	case transaction.FieldTellerId:
		m.ResetTellerId()
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TransactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TransactionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TransactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TransactionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TransactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TransactionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TransactionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Transaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TransactionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Transaction edge %s", name)
}
