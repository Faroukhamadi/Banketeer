// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Faroukhamadi/Banketeer/transaction_service/transactiondb/ent/predicate"
	"github.com/Faroukhamadi/Banketeer/transaction_service/transactiondb/ent/transaction"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdateTime sets the "update_time" field.
func (tu *TransactionUpdate) SetUpdateTime(t time.Time) *TransactionUpdate {
	tu.mutation.SetUpdateTime(t)
	return tu
}

// SetAccountId sets the "accountId" field.
func (tu *TransactionUpdate) SetAccountId(i int) *TransactionUpdate {
	tu.mutation.ResetAccountId()
	tu.mutation.SetAccountId(i)
	return tu
}

// AddAccountId adds i to the "accountId" field.
func (tu *TransactionUpdate) AddAccountId(i int) *TransactionUpdate {
	tu.mutation.AddAccountId(i)
	return tu
}

// SetSenderAccountId sets the "senderAccountId" field.
func (tu *TransactionUpdate) SetSenderAccountId(i int) *TransactionUpdate {
	tu.mutation.ResetSenderAccountId()
	tu.mutation.SetSenderAccountId(i)
	return tu
}

// AddSenderAccountId adds i to the "senderAccountId" field.
func (tu *TransactionUpdate) AddSenderAccountId(i int) *TransactionUpdate {
	tu.mutation.AddSenderAccountId(i)
	return tu
}

// SetReceiverAccountId sets the "receiverAccountId" field.
func (tu *TransactionUpdate) SetReceiverAccountId(i int) *TransactionUpdate {
	tu.mutation.ResetReceiverAccountId()
	tu.mutation.SetReceiverAccountId(i)
	return tu
}

// AddReceiverAccountId adds i to the "receiverAccountId" field.
func (tu *TransactionUpdate) AddReceiverAccountId(i int) *TransactionUpdate {
	tu.mutation.AddReceiverAccountId(i)
	return tu
}

// SetTellerId sets the "tellerId" field.
func (tu *TransactionUpdate) SetTellerId(i int) *TransactionUpdate {
	tu.mutation.ResetTellerId()
	tu.mutation.SetTellerId(i)
	return tu
}

// AddTellerId adds i to the "tellerId" field.
func (tu *TransactionUpdate) AddTellerId(i int) *TransactionUpdate {
	tu.mutation.AddTellerId(i)
	return tu
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TransactionUpdate) defaults() {
	if _, ok := tu.mutation.UpdateTime(); !ok {
		v := transaction.UpdateDefaultUpdateTime()
		tu.mutation.SetUpdateTime(v)
	}
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transaction.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transaction.FieldUpdateTime,
		})
	}
	if value, ok := tu.mutation.AccountId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldAccountId,
		})
	}
	if value, ok := tu.mutation.AddedAccountId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldAccountId,
		})
	}
	if value, ok := tu.mutation.SenderAccountId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldSenderAccountId,
		})
	}
	if value, ok := tu.mutation.AddedSenderAccountId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldSenderAccountId,
		})
	}
	if value, ok := tu.mutation.ReceiverAccountId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldReceiverAccountId,
		})
	}
	if value, ok := tu.mutation.AddedReceiverAccountId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldReceiverAccountId,
		})
	}
	if value, ok := tu.mutation.TellerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldTellerId,
		})
	}
	if value, ok := tu.mutation.AddedTellerId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldTellerId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetUpdateTime sets the "update_time" field.
func (tuo *TransactionUpdateOne) SetUpdateTime(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetUpdateTime(t)
	return tuo
}

// SetAccountId sets the "accountId" field.
func (tuo *TransactionUpdateOne) SetAccountId(i int) *TransactionUpdateOne {
	tuo.mutation.ResetAccountId()
	tuo.mutation.SetAccountId(i)
	return tuo
}

// AddAccountId adds i to the "accountId" field.
func (tuo *TransactionUpdateOne) AddAccountId(i int) *TransactionUpdateOne {
	tuo.mutation.AddAccountId(i)
	return tuo
}

// SetSenderAccountId sets the "senderAccountId" field.
func (tuo *TransactionUpdateOne) SetSenderAccountId(i int) *TransactionUpdateOne {
	tuo.mutation.ResetSenderAccountId()
	tuo.mutation.SetSenderAccountId(i)
	return tuo
}

// AddSenderAccountId adds i to the "senderAccountId" field.
func (tuo *TransactionUpdateOne) AddSenderAccountId(i int) *TransactionUpdateOne {
	tuo.mutation.AddSenderAccountId(i)
	return tuo
}

// SetReceiverAccountId sets the "receiverAccountId" field.
func (tuo *TransactionUpdateOne) SetReceiverAccountId(i int) *TransactionUpdateOne {
	tuo.mutation.ResetReceiverAccountId()
	tuo.mutation.SetReceiverAccountId(i)
	return tuo
}

// AddReceiverAccountId adds i to the "receiverAccountId" field.
func (tuo *TransactionUpdateOne) AddReceiverAccountId(i int) *TransactionUpdateOne {
	tuo.mutation.AddReceiverAccountId(i)
	return tuo
}

// SetTellerId sets the "tellerId" field.
func (tuo *TransactionUpdateOne) SetTellerId(i int) *TransactionUpdateOne {
	tuo.mutation.ResetTellerId()
	tuo.mutation.SetTellerId(i)
	return tuo
}

// AddTellerId adds i to the "tellerId" field.
func (tuo *TransactionUpdateOne) AddTellerId(i int) *TransactionUpdateOne {
	tuo.mutation.AddTellerId(i)
	return tuo
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	var (
		err  error
		node *Transaction
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Transaction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TransactionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TransactionUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdateTime(); !ok {
		v := transaction.UpdateDefaultUpdateTime()
		tuo.mutation.SetUpdateTime(v)
	}
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transaction.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transaction.FieldUpdateTime,
		})
	}
	if value, ok := tuo.mutation.AccountId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldAccountId,
		})
	}
	if value, ok := tuo.mutation.AddedAccountId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldAccountId,
		})
	}
	if value, ok := tuo.mutation.SenderAccountId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldSenderAccountId,
		})
	}
	if value, ok := tuo.mutation.AddedSenderAccountId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldSenderAccountId,
		})
	}
	if value, ok := tuo.mutation.ReceiverAccountId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldReceiverAccountId,
		})
	}
	if value, ok := tuo.mutation.AddedReceiverAccountId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldReceiverAccountId,
		})
	}
	if value, ok := tuo.mutation.TellerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldTellerId,
		})
	}
	if value, ok := tuo.mutation.AddedTellerId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldTellerId,
		})
	}
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
