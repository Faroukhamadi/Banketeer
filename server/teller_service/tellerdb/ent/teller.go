// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Faroukhamadi/Banketeer/teller_service/tellerdb/ent/teller"
)

// Teller is the model entity for the Teller schema.
type Teller struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Role holds the value of the "role" field.
	Role teller.Role `json:"role,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Teller) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case teller.FieldID:
			values[i] = new(sql.NullInt64)
		case teller.FieldUsername, teller.FieldPassword, teller.FieldRole:
			values[i] = new(sql.NullString)
		case teller.FieldCreateTime, teller.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Teller", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Teller fields.
func (t *Teller) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case teller.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case teller.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				t.CreateTime = value.Time
			}
		case teller.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				t.UpdateTime = value.Time
			}
		case teller.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				t.Username = value.String
			}
		case teller.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				t.Password = value.String
			}
		case teller.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				t.Role = teller.Role(value.String)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Teller.
// Note that you need to call Teller.Unwrap() before calling this method if this Teller
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Teller) Update() *TellerUpdateOne {
	return (&TellerClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Teller entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Teller) Unwrap() *Teller {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Teller is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Teller) String() string {
	var builder strings.Builder
	builder.WriteString("Teller(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("create_time=")
	builder.WriteString(t.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(t.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(t.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(t.Password)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", t.Role))
	builder.WriteByte(')')
	return builder.String()
}

// Tellers is a parsable slice of Teller.
type Tellers []*Teller

func (t Tellers) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
