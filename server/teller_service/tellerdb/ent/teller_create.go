// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Faroukhamadi/Banketeer/teller_service/tellerdb/ent/teller"
)

// TellerCreate is the builder for creating a Teller entity.
type TellerCreate struct {
	config
	mutation *TellerMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tc *TellerCreate) SetCreateTime(t time.Time) *TellerCreate {
	tc.mutation.SetCreateTime(t)
	return tc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tc *TellerCreate) SetNillableCreateTime(t *time.Time) *TellerCreate {
	if t != nil {
		tc.SetCreateTime(*t)
	}
	return tc
}

// SetUpdateTime sets the "update_time" field.
func (tc *TellerCreate) SetUpdateTime(t time.Time) *TellerCreate {
	tc.mutation.SetUpdateTime(t)
	return tc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tc *TellerCreate) SetNillableUpdateTime(t *time.Time) *TellerCreate {
	if t != nil {
		tc.SetUpdateTime(*t)
	}
	return tc
}

// SetUsername sets the "username" field.
func (tc *TellerCreate) SetUsername(s string) *TellerCreate {
	tc.mutation.SetUsername(s)
	return tc
}

// SetPassword sets the "password" field.
func (tc *TellerCreate) SetPassword(s string) *TellerCreate {
	tc.mutation.SetPassword(s)
	return tc
}

// SetRole sets the "role" field.
func (tc *TellerCreate) SetRole(t teller.Role) *TellerCreate {
	tc.mutation.SetRole(t)
	return tc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (tc *TellerCreate) SetNillableRole(t *teller.Role) *TellerCreate {
	if t != nil {
		tc.SetRole(*t)
	}
	return tc
}

// Mutation returns the TellerMutation object of the builder.
func (tc *TellerCreate) Mutation() *TellerMutation {
	return tc.mutation
}

// Save creates the Teller in the database.
func (tc *TellerCreate) Save(ctx context.Context) (*Teller, error) {
	var (
		err  error
		node *Teller
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TellerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Teller)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TellerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TellerCreate) SaveX(ctx context.Context) *Teller {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TellerCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TellerCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TellerCreate) defaults() {
	if _, ok := tc.mutation.CreateTime(); !ok {
		v := teller.DefaultCreateTime()
		tc.mutation.SetCreateTime(v)
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		v := teller.DefaultUpdateTime()
		tc.mutation.SetUpdateTime(v)
	}
	if _, ok := tc.mutation.Role(); !ok {
		v := teller.DefaultRole
		tc.mutation.SetRole(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TellerCreate) check() error {
	if _, ok := tc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Teller.create_time"`)}
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Teller.update_time"`)}
	}
	if _, ok := tc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "Teller.username"`)}
	}
	if _, ok := tc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "Teller.password"`)}
	}
	if _, ok := tc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "Teller.role"`)}
	}
	if v, ok := tc.mutation.Role(); ok {
		if err := teller.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Teller.role": %w`, err)}
		}
	}
	return nil
}

func (tc *TellerCreate) sqlSave(ctx context.Context) (*Teller, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tc *TellerCreate) createSpec() (*Teller, *sqlgraph.CreateSpec) {
	var (
		_node = &Teller{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: teller.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: teller.FieldID,
			},
		}
	)
	if value, ok := tc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teller.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := tc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teller.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := tc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teller.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := tc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teller.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := tc.mutation.Role(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: teller.FieldRole,
		})
		_node.Role = value
	}
	return _node, _spec
}

// TellerCreateBulk is the builder for creating many Teller entities in bulk.
type TellerCreateBulk struct {
	config
	builders []*TellerCreate
}

// Save creates the Teller entities in the database.
func (tcb *TellerCreateBulk) Save(ctx context.Context) ([]*Teller, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Teller, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TellerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TellerCreateBulk) SaveX(ctx context.Context) []*Teller {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TellerCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TellerCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
